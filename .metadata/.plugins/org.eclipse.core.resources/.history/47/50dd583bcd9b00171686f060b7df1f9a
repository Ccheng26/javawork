package com.home.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.home.exception.RegistrationException;
import com.home.model.QuoteDetails;
import com.home.util.OracleSqlQueries;
import com.home.util.RegUserConstants;
import com.home.model.PropertyDetails;
import com.home.model.LocationAddress;

public class QuoteDetailDAO {
	static DecimalFormat df = new DecimalFormat("0.00");
	public QuoteDetails getQuoteDetails(final int user_id) throws RegistrationException {
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet resultSet = null;
		QuoteDetails quote = null;

		List<QuoteDetails> quoteList;
		try {
			final AbstractDAOFactory daoFactory = AbstractDAOFactory.getDaoFactory(RegUserConstants.ORACLE);
			conn = daoFactory.getConnection();
			stmt = conn.prepareStatement(OracleSqlQueries.SELECT_QUOTE);
			stmt.setInt(1, user_id);
			resultSet = stmt.executeQuery();

			quoteList = new ArrayList<QuoteDetails>();
			while (resultSet.next()) {
				quote = new QuoteDetails();
				quote.setQuoteId(resultSet.getInt(1));
				quote.setLocationId(resultSet.getInt(2));
				quote.setUserId(resultSet.getInt(3));
				quote.setMonthlyPremium(resultSet.getDouble(4));
				quote.setDwellingCoverage(resultSet.getDouble(5));
				quote.setDetachedStructures(resultSet.getDouble(6));
				quote.setPersonalProperty(resultSet.getDouble(7));
				quote.setLivingExpense(resultSet.getDouble(8));
				quote.setMedExp(resultSet.getDouble(9));
				quote.setDeductible(resultSet.getDouble(10));
				quote.setIssueDate(resultSet.getString(11));
				quoteList.add(quote);
				System.out.println(quote.getMonthlyPremium());
			}
			System.out.println(quoteList.size());
			for (QuoteDetails q : quoteList) {
				System.out.println(q.getLivingExpense());

			}
			// System.out.println(quoteList.get(0).getMonthlyPremium());
			// System.out.println(quoteList.get(1).getMonthlyPremium());
			stmt.close();
			// CourseBO courseBO = new CourseBO();
			// student.setCourses(courseBO.getCourse(student.getStudent_id()));
		} catch (SQLException e) {
			throw new RegistrationException(e.getMessage());
		} catch (Exception e) {
			throw new RegistrationException(e.getMessage());
		} finally {
			try {
				resultSet.close();
				stmt.close();
				conn.close();
			} catch (SQLException e) {
			}
		}
		return quote;
	}

	public double createDwellingCoverage(PropertyDetails property) {

		double home_value = 120 * property.getSqft();
		int yearbuilt = property.getYearBuilt();
		int year = Calendar.getInstance().get(Calendar.YEAR);
		int difference = year - yearbuilt;
		double coverage;

		if (difference > 0 && difference < 5) {
			coverage = home_value - (0.10 * home_value);
		} else if (10 > difference && difference >= 5) {
			coverage = home_value - (0.20 * home_value);
		} else if (20 > difference && difference >= 10) {
			coverage = home_value - (0.30 * home_value);
		} else {
			coverage = home_value - (0.50 * home_value);
		}
		return coverage;
	}

	public double makeMonthlyPremium(PropertyDetails property, LocationAddress locale) {

		double market_value = (double)property.getMarketValue();
		double startvalue = (market_value / 1000.00) * 5.0;
		String residence = locale.getResidenceType();
		System.out.println(residence);
		double monthly;
System.out.println("market value is" + market_value);
		if ("Single-Family Home".equals(residence)) {
			monthly = (startvalue + .5 * startvalue) / 12;
		} else if ("Condo".equals(residence)) {
			monthly = (startvalue + .06 * startvalue) / 12;
		} else if ("Duplex".equals(residence)) {
			monthly = (startvalue + .06 * startvalue) / 12;
		} else if ("Apartment".equals(residence)) {
			monthly = (startvalue + .06 * startvalue) / 12;
		} else if ("Townhouse".equals(residence)) {
			monthly = (startvalue + .07 * startvalue) / 12;
		} else if ("Rowhouse".equals(residence)) {
			monthly = (startvalue + .07 * startvalue) / 12;
		} else {
			monthly = startvalue / 12;
		}
		System.out.println("the monthly is "+ monthly);
		
		return df(monthly);

	}

	public void saveQuoteDetails(final PropertyDetails property, final LocationAddress locale)
			throws RegistrationException {
		Connection conn = null;
		PreparedStatement stmt = null;
		Date date = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy/MM/dd");
		String dateNow = ft.format(date);

		try {
			final AbstractDAOFactory daoFactory = AbstractDAOFactory.getDaoFactory(RegUserConstants.ORACLE);
			conn = daoFactory.getConnection();
			stmt = conn.prepareStatement(OracleSqlQueries.SAVE_QUOTE_DETAILS);
			stmt.setInt(1, locale.getLocationId());
			stmt.setInt(2, locale.getUserId());
			stmt.setDouble(3, makeMonthlyPremium(property, locale));
			stmt.setDouble(4, createDwellingCoverage(property)); // dwelling coverage see above

			stmt.setDouble(5, 0.10 * createDwellingCoverage(property)); // detached structure
			stmt.setDouble(6, 0.60 * createDwellingCoverage(property)); // personal property
			stmt.setDouble(7, 0.20 * createDwellingCoverage(property)); // add living expense
			stmt.setDouble(8, 5000.00);
			stmt.setDouble(9, 0.01 * property.getMarketValue());
			stmt.setString(10, dateNow);

			stmt.executeUpdate();
			stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RegistrationException(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			throw new RegistrationException(e.getMessage());
		} finally {
			try {
				stmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) throws RegistrationException {
		QuoteDetails o = new QuoteDetails();
		o.setUserId(2);
		o.setMonthlyPremium(1000);
		o.setDwellingCoverage(10025);
		o.setDetachedStructures(50);
		o.setPersonalProperty(150);
		o.setLivingExpense(555);
		o.setMedExp(200);
		o.setDeductible(59);
		o.setIssueDate("5/5/5555");
		QuoteDetailDAO loc = new QuoteDetailDAO();
		loc.getQuoteDetails(2).getQuoteId();
		//loc.getQuoteDetails(2).getMonthlyPremium();
	}

}
